#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler'

Bundler.setup

require 'pry'
require 'rom-repository'
require 'rom-changeset'
require 'pry-byebug'
require 'dry/monitor'

config = ROM::Configuration.new(:sql, 'postgres://localhost/rom_console')
notifications = Dry::Monitor::Notifications.new(:console)

config.plugin :sql, relations: :instrumentation do |plugin_config|
  plugin_config.notifications = notifications
end

Dry::Monitor::SQL::Logger.new(Logger.new($stdout)).subscribe(notifications)

gateway = config.gateways[:default]

gateway.connection.drop_table?(:books)
gateway.connection.drop_table?(:tasks)
gateway.connection.drop_table?(:users)

gateway.create_table :books do
  primary_key :id
  column :title, String
  column :meta, :jsonb
  column :created_at, Time
  column :updated_at, Time
end

gateway.create_table :users do
  primary_key :id
  column :name, String
end

gateway.create_table :tasks do
  primary_key :id
  foreign_key :user_id, :users, on_delete: :cascade
  column :title, String
end

config.relation(:books) do
  schema(infer: true)
end

config.relation(:users) do
  schema(infer: true) do
    associations do
      has_many :tasks
    end
  end
end

config.relation(:tasks) do
  schema(infer: true) do
    associations do
      belongs_to :user
    end
  end
end

class UserRepo < ROM::Repository[:users]
  commands :create, update: :by_pk, delete: :by_pk
end

rom = ROM.container(config)
repo = UserRepo.new(rom)

class Context
  attr_reader :rom, :repo

  def initialize(rom, repo)
    @rom = rom
    @repo = repo
  end

  def users
    rom.relations[:users]
  end

  def tasks
    rom.relations[:tasks]
  end
end

Pry.start(Context.new(rom, repo))
